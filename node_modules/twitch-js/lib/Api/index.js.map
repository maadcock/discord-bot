{"version":3,"sources":["../../src/Api/index.js"],"names":["Errors","validators","constants","Api","maybeOptions","_readyState","options","_log","scope","log","clientId","token","newOptions","readyState","Promise","resolve","get","then","_status","statusResponse","reject","status","endpoint","_handleFetch","method","version","HELIX_VERSION","_isVersionHelix","HELIX_URL_ROOT","KRAKEN_URL_ROOT","isHelix","authorizationHeader","HELIX_AUTHORIZATION_HEADER","KRAKEN_AUTHORIZATION_HEADER","authorization","headers","Accept","Authorization","maybeUrl","fetchProfiler","startTimer","fetchOptions","baseUrl","_getBaseUrl","_getHeaders","url","message","request","done","res","catch","level","error","body","AuthenticationError","onAuthenticationFailure","info","_options","apiOptions"],"mappings":"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","file":"index.js","sourcesContent":["import { get, includes, toLower } from 'lodash'\n\nimport createLogger from '../utils/logger/create'\n\nimport fetchUtil from '../utils/fetch'\nimport * as Errors from '../utils/fetch/Errors'\nimport * as validators from './utils/validators'\n\nimport * as constants from './constants'\n\n/**\n * @class\n * @public\n *\n * @example <caption>Get Featured Streams</caption>\n * const token = 'cfabdegwdoklmawdzdo98xt2fo512y'\n * const username = 'ronni'\n * const { api } = new TwitchJs({ token, username })\n *\n * api.get('streams/featured').then(response => {\n *   // Do stuff ...\n * })\n */\nclass Api {\n  _options\n  _log\n\n  /**\n   * API ready state\n   * @private\n   * @type {ApiReadyState}\n   */\n  _readyState = 1\n\n  /**\n   * API status state.\n   * @typedef {Object} ApiStatusState\n   * @property {Object} token\n   * @property {Object} token.authorization\n   * @property {Array<string>} token.authorization.scopes\n   * @property {string} token.authorization.createdAt\n   * @property {string} token.authorization.updatedAt\n   * @property {string} token.clientId\n   * @property {string} token.userId\n   * @property {string} token.userName\n   * @property {boolean} token.valid\n   */\n  /**\n   * API status.\n   * @private\n   * @type {ApiStatusState}\n   */\n  _status\n\n  /**\n   * API constructor.\n   * @param {ApiOptions} options\n   */\n  constructor(maybeOptions = {}) {\n    /**\n     * @type {ApiOptions}\n     * @private\n     */\n    this.options = maybeOptions\n\n    this._log = createLogger({ scope: 'Api', ...this.options.log })\n  }\n\n  /**\n   * @function Api#setOptions\n   * @public\n   * @param {ApiOptions} options\n   */\n  set options(maybeOptions) {\n    this._options = validators.apiOptions(maybeOptions)\n  }\n\n  /**\n   * @function Api#getOptions\n   * @public\n   * @return {ApiOptions}\n   */\n  get options() {\n    return this._options\n  }\n\n  /**\n   * @function Api#getReadyState\n   * @public\n   * @return {number}\n   *\n   */\n  get readyState() {\n    return this._readyState\n  }\n\n  /**\n   * @function Api#getStatus\n   * @public\n   * @return {ApiStatusState}\n   */\n  get status() {\n    return this._status\n  }\n\n  /**\n   * Update client options.\n   * @function Api#updateOptions\n   * @public\n   * @param {ApiOptions} options New client options. To update `token` or `clientId`, use [**api.initialize()**]{@link Api#initialize}.\n   */\n  updateOptions(options) {\n    const { clientId, token } = this.options\n    this.options = { ...options, clientId, token }\n  }\n\n  /**\n   * @function Api#initialize\n   * @private\n   * Initialize API client and retrieve status.\n   * @param {ApiOptions} [options] Provide new options to client.\n   * @returns {Promise<ApiStatusState, Object>}\n   * @see https://dev.twitch.tv/docs/v5/#root-url\n   */\n  initialize(newOptions) {\n    if (newOptions) {\n      this.options = { ...this.options, ...newOptions }\n    }\n\n    if (!newOptions && this.readyState === 2) {\n      return Promise.resolve()\n    }\n\n    return this.get().then(statusResponse => {\n      this._readyState = 2\n      this._status = statusResponse\n\n      return statusResponse\n    })\n  }\n\n  /**\n   * @function Api#hasScope\n   * @private\n   * Check if current credentials include `scope`.\n   * @param {string} scope Scope to check.\n   * @return {Promise<boolean, boolean>}\n   * @see https://dev.twitch.tv/docs/authentication/#twitch-api-v5\n   */\n  hasScope(scope) {\n    return new Promise((resolve, reject) => {\n      if (this.readyState !== 2) {\n        return reject(false)\n      }\n\n      return includes(get(this.status, 'token.authorization.scopes', []), scope)\n        ? resolve(true)\n        : reject(false)\n    })\n  }\n\n  /**\n   * @function Api#get\n   * @public\n   * GET endpoint.\n   * @param {string} endpoint\n   * @param {FetchOptions} [options]\n   * @param {string} [options.version]\n   *\n   * @example <caption>Get Live Overwatch Streams</caption>\n   * api.get('streams', { search: { game: 'Overwatch' } })\n   *   .then(response => {\n   *     // Do stuff with response ...\n   *   })\n   * @example <caption>Get user follows (Helix)</caption>\n   * api.get('users/follows', { version: 'helix', search: { to_id: '23161357' } })\n   *   .then(response => {\n   *     // Do stuff with response ...\n   *   })\n   */\n  get(endpoint, options = {}) {\n    return this._handleFetch(endpoint, options)\n  }\n\n  /**\n   * @function Api#post\n   * @public\n   * POST endpoint.\n   * @param {string} endpoint\n   * @param {FetchOptions} [options={method:'post'}]\n   * @param {string} [options.version]\n   */\n  post(endpoint, options = {}) {\n    return this._handleFetch(endpoint, { ...options, method: 'post' })\n  }\n\n  /**\n   * @function Api#put\n   * @public\n   * PUT endpoint.\n   * @param {string} endpoint\n   * @param {FetchOptions} [options={method:'put'}]\n   * @param {string} [options.version]\n   */\n  put(endpoint, options = {}) {\n    return this._handleFetch(endpoint, { ...options, method: 'put' })\n  }\n\n  _isVersionHelix(version) {\n    return toLower(version) === constants.HELIX_VERSION\n  }\n\n  _getBaseUrl({ version } = {}) {\n    return this._isVersionHelix(version)\n      ? constants.HELIX_URL_ROOT\n      : constants.KRAKEN_URL_ROOT\n  }\n\n  _getHeaders({ version } = {}) {\n    const { clientId, token } = this.options\n\n    const isHelix = this._isVersionHelix(version)\n\n    const authorizationHeader = isHelix\n      ? constants.HELIX_AUTHORIZATION_HEADER\n      : constants.KRAKEN_AUTHORIZATION_HEADER\n    const authorization = `${authorizationHeader} ${token}`\n\n    const headers = isHelix\n      ? {}\n      : { Accept: 'application/vnd.twitchtv.v5+json' }\n\n    if (!clientId) {\n      return { ...headers, Authorization: authorization }\n    } else if (!token) {\n      return { ...headers, 'Client-ID': clientId }\n    }\n\n    return {\n      ...headers,\n      'Client-ID': clientId,\n      Authorization: authorization,\n    }\n  }\n\n  _handleFetch(maybeUrl = '', options = {}) {\n    const fetchProfiler = this._log.startTimer()\n\n    const { version, ...fetchOptions } = options\n\n    const baseUrl = this._getBaseUrl({ version })\n    const headers = this._getHeaders({ version })\n\n    const url = `${baseUrl}/${maybeUrl}`\n\n    const message = `${fetchOptions.method || 'GET'} ${baseUrl}`\n\n    const request = () =>\n      fetchUtil(url, {\n        ...fetchOptions,\n        headers: {\n          ...fetchOptions.headers,\n          ...headers,\n        },\n      }).then(res => {\n        fetchProfiler.done({ message })\n        return res\n      })\n\n    return request().catch(error => {\n      fetchProfiler.done({ level: 'error', message: error.body })\n\n      if (error instanceof Errors.AuthenticationError) {\n        return this.options\n          .onAuthenticationFailure()\n          .then(token => (this.options = { ...this.options, token }))\n          .then(() => this._log.info('Retrying (with new credentials)'))\n          .then(() => request())\n      }\n\n      throw error\n    })\n  }\n}\n\nexport default Api\n"]}