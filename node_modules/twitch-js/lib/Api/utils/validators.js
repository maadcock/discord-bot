'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.apiOptions = undefined;

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _isFunction2 = require('lodash/isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _defaultsDeep2 = require('lodash/defaultsDeep');

var _defaultsDeep3 = _interopRequireDefault(_defaultsDeep2);

var _conformsTo2 = require('lodash/conformsTo');

var _conformsTo3 = _interopRequireDefault(_conformsTo2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var apiOptions = function apiOptions(maybeOptions) {
  /**
   * API options
   * @typedef {Object} ApiOptions
   * @property {string} [clientId] Optional if token is defined.
   * @property {string} [token] Optional if clientId is defined.
   * @property {Object} [log] Log options
   * @property {function} [onAuthenticationFailure]
   *
   */
  var shape = {
    onAuthenticationFailure: _isFunction3.default
  };

  var shapeWithClientId = _extends({}, shape, {
    clientId: _isString3.default
  });

  var shapeWithToken = _extends({}, shape, {
    token: _isString3.default
  });

  var options = (0, _defaultsDeep3.default)({}, _extends({}, maybeOptions), {
    onAuthenticationFailure: function onAuthenticationFailure() {
      return Promise.reject();
    }
  });

  (0, _invariant2.default)((0, _conformsTo3.default)(options, shapeWithClientId) || (0, _conformsTo3.default)(options, shapeWithToken), '[twitch-js/Api] options: Expected valid options');

  return options;
};

exports.apiOptions = apiOptions;
//# sourceMappingURL=validators.js.map