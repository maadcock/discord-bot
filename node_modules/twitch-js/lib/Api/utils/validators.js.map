{"version":3,"sources":["../../../src/Api/utils/validators.js"],"names":["apiOptions","shape","onAuthenticationFailure","shapeWithClientId","clientId","shapeWithToken","token","options","maybeOptions","Promise","reject"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAGA,IAAMA,aAAa,SAAbA,UAAa,eAAgB;AACjC;;;;;;;;;AASA,MAAMC,QAAQ;AACZC;AADY,GAAd;;AAIA,MAAMC,iCACDF,KADC;AAEJG;AAFI,IAAN;;AAKA,MAAMC,8BACDJ,KADC;AAEJK;AAFI,IAAN;;AAKA,MAAMC,UAAU,4BACd,EADc,eAETC,YAFS,GAGd;AACEN,6BAAyB;AAAA,aAAMO,QAAQC,MAAR,EAAN;AAAA;AAD3B,GAHc,CAAhB;;AAQA,2BACE,0BAAWH,OAAX,EAAoBJ,iBAApB,KACE,0BAAWI,OAAX,EAAoBF,cAApB,CAFJ,EAGE,iDAHF;;AAMA,SAAOE,OAAP;AACD,CAvCD;;QAyCSP,U,GAAAA,U","file":"validators.js","sourcesContent":["import invariant from 'invariant'\nimport { conformsTo, defaultsDeep, isFunction, isString } from 'lodash'\n\nconst apiOptions = maybeOptions => {\n  /**\n   * API options\n   * @typedef {Object} ApiOptions\n   * @property {string} [clientId] Optional if token is defined.\n   * @property {string} [token] Optional if clientId is defined.\n   * @property {Object} [log] Log options\n   * @property {function} [onAuthenticationFailure]\n   *\n   */\n  const shape = {\n    onAuthenticationFailure: isFunction,\n  }\n\n  const shapeWithClientId = {\n    ...shape,\n    clientId: isString,\n  }\n\n  const shapeWithToken = {\n    ...shape,\n    token: isString,\n  }\n\n  const options = defaultsDeep(\n    {},\n    { ...maybeOptions },\n    {\n      onAuthenticationFailure: () => Promise.reject(),\n    },\n  )\n\n  invariant(\n    conformsTo(options, shapeWithClientId) ||\n      conformsTo(options, shapeWithToken),\n    '[twitch-js/Api] options: Expected valid options',\n  )\n\n  return options\n}\n\nexport { apiOptions }\n"]}