'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AuthenticationError = exports.FetchError = undefined;

var _BaseError2 = require('../BaseError');

var _BaseError3 = _interopRequireDefault(_BaseError2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var FetchError = function (_BaseError) {
  _inherits(FetchError, _BaseError);

  function FetchError(response, body) {
    var _ref;

    _classCallCheck(this, FetchError);

    for (var _len = arguments.length, params = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      params[_key - 2] = arguments[_key];
    }

    var _this = _possibleConstructorReturn(this, (_ref = FetchError.__proto__ || Object.getPrototypeOf(FetchError)).call.apply(_ref, [this, response.url + ' ' + response.statusText].concat(params)));

    _this.ok = false;
    _this.status = response.status;
    _this.statusText = response.statusText;
    _this.url = response.url;
    _this.body = body;
    return _this;
  }

  return FetchError;
}(_BaseError3.default);

var AuthenticationError = function (_FetchError) {
  _inherits(AuthenticationError, _FetchError);

  function AuthenticationError() {
    _classCallCheck(this, AuthenticationError);

    return _possibleConstructorReturn(this, (AuthenticationError.__proto__ || Object.getPrototypeOf(AuthenticationError)).apply(this, arguments));
  }

  return AuthenticationError;
}(FetchError);

function ErrorFactory(response, body) {
  if (response.status === 401) {
    return new AuthenticationError(response, body);
  }

  return new FetchError(response, body);
}

exports.FetchError = FetchError;
exports.AuthenticationError = AuthenticationError;
exports.default = ErrorFactory;
//# sourceMappingURL=Errors.js.map