{"version":3,"sources":["../../../src/utils/fetch/index.js"],"names":["fetchUtil","url","options","qsOptions","isBodyJson","body","JSON","stringify","headers","search","method","undefined","then"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AAEA;;;;;;AAEA;;;;;;;;;AASA;;;;;;;AAOA,IAAMA,YAAY,SAAZA,SAAY,CAACC,GAAD,EAAuC;AAAA,MAAjCC,OAAiC,uEAAvB,EAAuB;AAAA,MAAnBC,SAAmB,uEAAP,EAAO;;AACvD,MAAMC,aACJF,QAAQG,IAAR,IACA,EAAEH,QAAQG,IAAR,8BAAF,CADA,IAEA,QAAOH,QAAQG,IAAf,MAAwB,QAH1B;;AAKA,MAAMA,OAAOD,aAAaE,KAAKC,SAAL,CAAeL,QAAQG,IAAvB,CAAb,GAA4CH,QAAQG,IAAjE;;AAEA,MAAMG,UAAUJ,0BACPF,QAAQM,OADD,IACU,gBAAgB,kBAD1B,MAEZN,QAAQM,OAFZ;;AAIA,MAAMC,SACJ,QAAOP,QAAQO,MAAf,MAA0B,QAA1B,SACQ,mBAAUP,QAAQO,MAAlB,EAA0BN,SAA1B,CADR,GAEI,EAHN;;AAKA,SAAO,8BAASF,GAAT,GAAeQ,MAAf,eACFP,OADE;AAELQ,YAAQR,QAAQQ,MAAR,IAAkB,KAFrB;AAGLD,YAAQE,SAHH;AAILH,oBAJK;AAKLH;AALK,MAMJO,IANI,kBAAP;AAOD,CAxBD;;kBA0BeZ,S","file":"index.js","sourcesContent":["import fetch from 'node-fetch'\nimport FormData from 'form-data'\nimport { stringify } from 'qs'\n\nimport parser from './parser'\n\n/**\n * Fetch options\n * @typedef {Object} FetchOptions\n * @property {string} [options.method=get] The request method, e.g., `get`, `post`.\n * @property {Object} [options.headers] Any headers you want to add to your request.\n * @property {Object} [options.search] Any query parameters you want to add to your request.\n * @property {Object|FormData} [options.body] Any body that you want to add to your request.\n */\n\n/**\n * Fetches URL\n * @param {string} url\n * @param {FetchOptions} [options]\n * @param {Object} [qsOptions]\n * @return {Promise<Object, Object>}\n */\nconst fetchUtil = (url, options = {}, qsOptions = {}) => {\n  const isBodyJson =\n    options.body &&\n    !(options.body instanceof FormData) &&\n    typeof options.body === 'object'\n\n  const body = isBodyJson ? JSON.stringify(options.body) : options.body\n\n  const headers = isBodyJson\n    ? { ...options.headers, 'Content-Type': 'application/json' }\n    : options.headers\n\n  const search =\n    typeof options.search === 'object'\n      ? `?${stringify(options.search, qsOptions)}`\n      : ''\n\n  return fetch(`${url}${search}`, {\n    ...options,\n    method: options.method || 'get',\n    search: undefined,\n    headers,\n    body,\n  }).then(parser)\n}\n\nexport default fetchUtil\n"]}