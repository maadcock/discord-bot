{"version":3,"sources":["../../src/Chat/Client.js"],"names":["constants","validators","utils","Errors","priority","CLIENT_PRIORITY","Client","maybeOptions","_pingTimeoutId","_reconnectTimeoutId","isReady","send","message","isModerator","fn","_ws","bind","queue","_moderatorQueue","_queue","task","push","Promise","resolve","reject","on","_log","debug","error","disconnect","_handleKeepAliveReset","close","_options","clientOptions","ssl","server","port","log","scope","protocol","onopen","_handleOpen","onmessage","_handleMessage","onerror","_handleError","onclose","_handleClose","_createQueue","isVerified","isKnown","maxLength","RATE_LIMIT_MODERATOR","RATE_LIMIT_VERIFIED_BOT","RATE_LIMIT_KNOWN_BOT","isUserAnonymous","CAPABILITIES","join","token","username","messageEvent","rawMessage","data","_handleKeepAlive","messages","forEach","event","command","JSON","stringify","_raw","undefined","isAuthenticationFailedMessage","emit","EVENTS","AUTHENTICATION_FAILED","COMMANDS","PING","_isUserAnonymous","WELCOME","CONNECTED","GLOBAL_USER_STATE","RECONNECT","ALL","title","query","body","ParseError","timestamp","Date","RAW","ERROR_ENCOUNTERED","DISCONNECTED","setTimeout","KEEP_ALIVE_PING_TIMEOUT","KEEP_ALIVE_RECONNECT_TIMEOUT","clearTimeout"],"mappings":"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","file":"Client.js","sourcesContent":["import { EventEmitter } from 'eventemitter3'\nimport { get } from 'lodash'\nimport { stringify } from 'qs'\nimport WebSocket from '../../shims/uws'\n\nimport Queue from '../Queue'\n\nimport createLogger from '../utils/logger/create'\n\nimport * as constants from './constants'\nimport baseParser from './utils/parsers'\nimport * as validators from './utils/validators'\nimport * as utils from './utils'\n\nimport * as Errors from './Errors'\n\nconst priority = constants.CLIENT_PRIORITY\n\nclass Client extends EventEmitter {\n  _options\n  _log\n\n  _ws\n  _queue\n\n  _pingTimeoutId = -1\n  _reconnectTimeoutId = -1\n\n  constructor(maybeOptions = {}) {\n    super()\n\n    // Validate options.\n    this._options = validators.clientOptions(maybeOptions)\n    const { ssl, server, port, log } = this._options\n\n    this._log = createLogger({ scope: 'Chat/Client', ...log })\n\n    // Instantiate WebSocket.\n    const protocol = ssl ? 'wss' : 'ws'\n    this._ws = new WebSocket(`${protocol}://${server}:${port}`)\n\n    this._ws.onopen = this._handleOpen.bind(this)\n    this._ws.onmessage = this._handleMessage.bind(this)\n    this._ws.onerror = this._handleError.bind(this)\n    this._ws.onclose = this._handleClose.bind(this)\n\n    // Instantiate Queue.\n    this._queue = this._createQueue(this._options)\n    this._moderatorQueue = this._options.isVerified\n      ? this._queue\n      : this._createQueue({ isModerator: true })\n  }\n\n  isReady = () => get(this, '_ws.readyState') === 1\n\n  /**\n   * Send message to Twitch\n   * @param {string} message\n   * @param {Object} options\n   * @param {number} options.priority\n   * @param {boolean} options.isModerator\n   */\n  send = (message, { priority = 1, isModerator } = {}) => {\n    const fn = this._ws.send.bind(this._ws, message)\n\n    const queue = isModerator ? this._moderatorQueue : this._queue\n\n    const task = queue.push({ fn, priority })\n\n    return new Promise((resolve, reject) =>\n      task\n        .on('accepted', () => {\n          resolve()\n          this._log.debug('<', message)\n        })\n        .on('failed', () => {\n          reject()\n          this._log.error('<', message)\n        }),\n    )\n  }\n\n  disconnect = () => {\n    this._handleKeepAliveReset()\n    this._ws.close()\n  }\n\n  _createQueue({ isModerator, isVerified, isKnown }) {\n    if (isModerator) {\n      return new Queue({ maxLength: constants.RATE_LIMIT_MODERATOR })\n    } else if (isVerified) {\n      return new Queue({ maxLength: constants.RATE_LIMIT_VERIFIED_BOT })\n    } else if (isKnown) {\n      return new Queue({ maxLength: constants.RATE_LIMIT_KNOWN_BOT })\n    }\n    return new Queue()\n  }\n\n  _isUserAnonymous() {\n    return utils.isUserAnonymous(get(this, '_options.username'))\n  }\n\n  _handleOpen() {\n    // Register for Twitch-specific capabilities.\n    this.send(`CAP REQ :${constants.CAPABILITIES.join(' ')}`, { priority })\n\n    // Authenticate.\n    const { token, username } = this._options\n    this.send(`PASS ${token}`, { priority })\n    this.send(`NICK ${username}`, { priority })\n  }\n\n  _handleMessage(messageEvent) {\n    const rawMessage = messageEvent.data\n\n    try {\n      this._handleKeepAlive()\n\n      const messages = baseParser(rawMessage)\n\n      messages.forEach(message => {\n        const event = message.command || ''\n\n        this._log.debug(\n          '> %s %s',\n          event,\n          JSON.stringify({ ...message, _raw: undefined }),\n        )\n\n        // Handle authentication failure.\n        if (utils.isAuthenticationFailedMessage(message)) {\n          this.emit(constants.EVENTS.AUTHENTICATION_FAILED, {\n            ...message,\n            event: constants.EVENTS.AUTHENTICATION_FAILED,\n          })\n\n          this.disconnect()\n        } else {\n          // Handle PING/PONG.\n          if (message.command === constants.COMMANDS.PING) {\n            this.send('PONG :tmi.twitch.tv', { priority })\n          }\n\n          // Handle successful connections.\n          if (this._isUserAnonymous()) {\n            if (message.command === constants.COMMANDS.WELCOME) {\n              this.emit(constants.EVENTS.CONNECTED, {\n                command: constants.EVENTS.CONNECTED,\n              })\n            }\n          } else {\n            if (message.command === constants.COMMANDS.GLOBAL_USER_STATE) {\n              this.emit(constants.EVENTS.CONNECTED, {\n                ...message,\n                command: constants.EVENTS.CONNECTED,\n              })\n            }\n          }\n\n          // Handle RECONNECT.\n          if (message.command === constants.COMMANDS.RECONNECT) {\n            this.emit(constants.EVENTS.RECONNECT, {\n              ...message,\n              command: constants.EVENTS.RECONNECT,\n            })\n          }\n        }\n\n        // Emit all messages.\n        this.emit(constants.EVENTS.ALL, message)\n      })\n    } catch (error) {\n      const title = 'Parsing error encountered'\n      const query = stringify({ title, body: rawMessage })\n      this._log.error(\n        'Parsing error encountered. Please create an issue: %s',\n        `https://github.com/twitch-devs/twitch-js/issues/new?${query}`,\n        error,\n      )\n\n      const message = new Errors.ParseError(error, rawMessage)\n\n      this.emit(message.command, message)\n      this.emit(constants.EVENTS.ALL, message)\n      throw message\n    } finally {\n      const message = {\n        _raw: rawMessage,\n        timestamp: new Date(),\n      }\n\n      this.emit(constants.EVENTS.RAW, message)\n    }\n  }\n\n  _handleError(messageEvent) {\n    const message = {\n      timestamp: new Date(),\n      event: constants.EVENTS.ERROR_ENCOUNTERED,\n      messageEvent,\n    }\n\n    this.emit(constants.EVENTS.ERROR_ENCOUNTERED, message)\n    this.emit(constants.EVENTS.ALL, message)\n  }\n\n  _handleClose(messageEvent) {\n    const message = {\n      timestamp: new Date(),\n      event: constants.EVENTS.DISCONNECTED,\n      messageEvent,\n    }\n\n    this.emit(constants.EVENTS.DISCONNECTED, message)\n    this.emit(constants.EVENTS.ALL, message)\n  }\n\n  _handleKeepAlive() {\n    this._handleKeepAliveReset()\n\n    if (this.isReady()) {\n      this._pingTimeoutId = setTimeout(\n        () => this.send(constants.COMMANDS.PING, { priority }),\n        constants.KEEP_ALIVE_PING_TIMEOUT,\n      )\n    }\n\n    this._reconnectTimeoutId = setTimeout(\n      () => this.emit(constants.EVENTS.RECONNECT, {}),\n      constants.KEEP_ALIVE_RECONNECT_TIMEOUT,\n    )\n  }\n\n  _handleKeepAliveReset() {\n    clearTimeout(this._pingTimeoutId)\n    clearTimeout(this._reconnectTimeoutId)\n    this._pingTimeoutId = -1\n    this._reconnectTimeoutId = -1\n  }\n}\n\nexport default Client\n"]}