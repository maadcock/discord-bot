'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimeoutError = exports.JoinError = exports.ParseError = exports.AuthenticationError = undefined;

var _BaseError2 = require('../utils/BaseError');

var _BaseError3 = _interopRequireDefault(_BaseError2);

var _constants = require('./constants');

var constants = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ChatError = function (_BaseError) {
  _inherits(ChatError, _BaseError);

  function ChatError(message) {
    var _ref;

    _classCallCheck(this, ChatError);

    for (var _len = arguments.length, other = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      other[_key - 1] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_ref = ChatError.__proto__ || Object.getPrototypeOf(ChatError)).call.apply(_ref, [this, message + ' [Chat]'].concat(other)));
  }

  return ChatError;
}(_BaseError3.default);

var AuthenticationError = function (_ChatError) {
  _inherits(AuthenticationError, _ChatError);

  function AuthenticationError(error) {
    var _ref2;

    _classCallCheck(this, AuthenticationError);

    for (var _len2 = arguments.length, other = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      other[_key2 - 1] = arguments[_key2];
    }

    var _this2 = _possibleConstructorReturn(this, (_ref2 = AuthenticationError.__proto__ || Object.getPrototypeOf(AuthenticationError)).call.apply(_ref2, [this, 'Authentication error encountered'].concat(other)));

    Object.assign(_this2, error);
    return _this2;
  }

  return AuthenticationError;
}(ChatError);

var ParseError = function (_ChatError2) {
  _inherits(ParseError, _ChatError2);

  function ParseError(error, rawMessage) {
    var _ref3;

    _classCallCheck(this, ParseError);

    for (var _len3 = arguments.length, other = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
      other[_key3 - 2] = arguments[_key3];
    }

    var _this3 = _possibleConstructorReturn(this, (_ref3 = ParseError.__proto__ || Object.getPrototypeOf(ParseError)).call.apply(_ref3, [this, 'Parse error encountered'].concat(other)));

    _this3._raw = rawMessage;
    _this3.command = constants.EVENTS.PARSE_ERROR_ENCOUNTERED;
    _this3.message = error;
    _this3.stack = error.stack;
    return _this3;
  }

  return ParseError;
}(ChatError);

var JoinError = function (_ChatError3) {
  _inherits(JoinError, _ChatError3);

  function JoinError(message) {
    var _ref4;

    _classCallCheck(this, JoinError);

    for (var _len4 = arguments.length, other = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      other[_key4 - 1] = arguments[_key4];
    }

    return _possibleConstructorReturn(this, (_ref4 = JoinError.__proto__ || Object.getPrototypeOf(JoinError)).call.apply(_ref4, [this, 'Join error encountered'].concat(other)));
  }

  return JoinError;
}(ChatError);

var TimeoutError = function (_ChatError4) {
  _inherits(TimeoutError, _ChatError4);

  function TimeoutError(message) {
    var _ref5;

    _classCallCheck(this, TimeoutError);

    for (var _len5 = arguments.length, other = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
      other[_key5 - 1] = arguments[_key5];
    }

    return _possibleConstructorReturn(this, (_ref5 = TimeoutError.__proto__ || Object.getPrototypeOf(TimeoutError)).call.apply(_ref5, [this, 'Timeout error encountered'].concat(other)));
  }

  return TimeoutError;
}(ChatError);

exports.AuthenticationError = AuthenticationError;
exports.ParseError = ParseError;
exports.JoinError = JoinError;
exports.TimeoutError = TimeoutError;
exports.default = ChatError;
//# sourceMappingURL=Errors.js.map