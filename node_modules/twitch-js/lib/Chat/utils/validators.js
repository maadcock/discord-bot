'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clientOptions = exports.chatOptions = undefined;

var _isNil2 = require('lodash/isNil');

var _isNil3 = _interopRequireDefault(_isNil2);

var _isBoolean2 = require('lodash/isBoolean');

var _isBoolean3 = _interopRequireDefault(_isBoolean2);

var _isFunction2 = require('lodash/isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _isFinite2 = require('lodash/isFinite');

var _isFinite3 = _interopRequireDefault(_isFinite2);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _defaults2 = require('lodash/defaults');

var _defaults3 = _interopRequireDefault(_defaults2);

var _conformsTo2 = require('lodash/conformsTo');

var _conformsTo3 = _interopRequireDefault(_conformsTo2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _constants = require('../constants');

var constants = _interopRequireWildcard(_constants);

var _sanitizers = require('./sanitizers');

var sanitizers = _interopRequireWildcard(_sanitizers);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var chatOptions = function chatOptions(maybeOptions) {
  /**
   * Chat options
   * @typedef {Object} ChatOptions
   * @property {string} [username]
   * @property {string} [token] OAuth token (use {@link https://twitchtokengenerator.com/} to generate one)
   * @property {boolean} [isKnown] bot is known (see {@link https://dev.twitch.tv/docs/irc/guide/#known-and-verified-bots} for more information)
   * @property {boolean} [isVerified] bot is verified (see {@link https://dev.twitch.tv/docs/irc/guide/#known-and-verified-bots} for more information)
   * @property {number} [connectionTimeout=CONNECTION_TIMEOUT]
   * @property {number} [joinTimeout=JOIN_TIMEOUT]
   * @property {Object} [log]
   * @property {Function} [onAuthenticationFailure]
   */
  var shape = {
    username: _isString3.default,
    token: function token(value) {
      return (0, _isNil3.default)(value) || (0, _isString3.default)(value);
    },
    isKnown: _isBoolean3.default,
    isVerified: _isBoolean3.default,
    connectionTimeout: _isFinite3.default,
    joinTimeout: _isFinite3.default,
    onAuthenticationFailure: _isFunction3.default
  };

  var options = (0, _defaults3.default)(_extends({}, maybeOptions, {
    username: sanitizers.username(maybeOptions.username),
    token: sanitizers.token(maybeOptions.token)
  }), {
    isKnown: false,
    isVerified: false,
    connectionTimeout: constants.CONNECTION_TIMEOUT,
    joinTimeout: constants.JOIN_TIMEOUT,
    onAuthenticationFailure: function onAuthenticationFailure() {
      return Promise.reject();
    }
  });

  (0, _invariant2.default)((0, _conformsTo3.default)(options, shape), '[twitch-js/Chat] options: Expected valid options');

  return options;
};

var clientOptions = function clientOptions(maybeOptions) {
  var shape = {
    username: _isString3.default,
    token: _isString3.default,
    server: _isString3.default,
    port: _isFinite3.default,
    ssl: _isBoolean3.default,
    isKnown: _isBoolean3.default,
    isVerified: _isBoolean3.default
  };

  var options = (0, _defaults3.default)(_extends({}, maybeOptions, {
    username: sanitizers.username(maybeOptions.username),
    token: sanitizers.token(maybeOptions.token)
  }), {
    server: constants.CHAT_SERVER,
    port: constants.CHAT_SERVER_SSL_PORT,
    ssl: true,
    isKnown: false,
    isVerified: false
  });

  (0, _invariant2.default)((0, _conformsTo3.default)(options, shape), '[twitch-js/Chat/Client] options: Expected valid options');

  return options;
};

exports.chatOptions = chatOptions;
exports.clientOptions = clientOptions;
//# sourceMappingURL=validators.js.map