'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resolvers = exports.factory = undefined;

var _camelCase2 = require('lodash/camelCase');

var _camelCase3 = _interopRequireDefault(_camelCase2);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _utils = require('../../utils');

var utils = _interopRequireWildcard(_utils);

var _constants = require('../constants');

var constants = _interopRequireWildcard(_constants);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var factory = function factory(chatInstance) {
  Object.entries(constants.CHAT_COMMANDS).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        command = _ref2[1];

    chatInstance[(0, _camelCase3.default)(key)] = function (channel) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return chatInstance.say.apply(chatInstance, [channel, '/' + command].concat(args));
    };
  });
};

var resolvers = function resolvers(chatInstance) {
  return function (channel, commandOrMessage) {
    var _ref3 = /^\/(.+)/.exec(commandOrMessage) || [],
        _ref4 = _slicedToArray(_ref3, 2),
        command = _ref4[1];

    switch (command) {
      case constants.CHAT_COMMANDS.BAN:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.BAN_SUCCESS + '/' + channel), utils.resolveOnEvent(chatInstance, constants.EVENTS.ALREADY_BANNED + '/' + channel)];

      case constants.CHAT_COMMANDS.CLEAR:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.CLEAR_CHAT + '/' + channel)];

      case constants.CHAT_COMMANDS.COLOR:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.COLOR_CHANGED + '/' + channel)];

      case constants.CHAT_COMMANDS.COMMERCIAL:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.COMMERCIAL_SUCCESS + '/' + channel)];

      case constants.CHAT_COMMANDS.EMOTE_ONLY:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.EMOTE_ONLY_ON + '/' + channel), utils.resolveOnEvent(chatInstance, constants.EVENTS.ALREADY_EMOTE_ONLY_ON + '/' + channel)];
      case constants.CHAT_COMMANDS.EMOTE_ONLY_OFF:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.EMOTE_ONLY_OFF + '/' + channel), utils.resolveOnEvent(chatInstance, constants.EVENTS.ALREADY_EMOTE_ONLY_OFF + '/' + channel)];

      case constants.CHAT_COMMANDS.FOLLOWERS_ONLY:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.FOLLOWERS_ON_ZERO + '/' + channel), utils.resolveOnEvent(chatInstance, constants.EVENTS.FOLLOWERS_ON + '/' + channel)];
      case constants.CHAT_COMMANDS.FOLLOWERS_ONLY_OFF:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.FOLLOWERS_OFF + '/' + channel)];

      case constants.CHAT_COMMANDS.HELP:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.COMMANDS_AVAILABLE + '/' + channel)];

      case constants.CHAT_COMMANDS.HOST:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.HOST_ON + '/' + channel)];

      case constants.CHAT_COMMANDS.MARKER:
        return [Promise.resolve()];

      // case constants.CHAT_COMMANDS.ME:
      // Use resolver for private messages.

      case constants.CHAT_COMMANDS.MOD:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.MOD_SUCCESS + '/' + channel), utils.resolveOnEvent(chatInstance, constants.EVENTS.BAD_MOD_MOD + '/' + channel)];
      case constants.CHAT_COMMANDS.MODS:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.ROOM_MODS + '/' + channel)];

      case constants.CHAT_COMMANDS.R9K:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.R9K_ON + '/' + channel), utils.resolveOnEvent(chatInstance, constants.EVENTS.ALREADY_R9K_ON + '/' + channel)];
      case constants.CHAT_COMMANDS.R9K_OFF:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.R9K_OFF + '/' + channel), utils.resolveOnEvent(chatInstance, constants.EVENTS.ALREADY_R9K_OFF + '/' + channel)];

      case constants.CHAT_COMMANDS.RAID:
        return [Promise.resolve()];

      case constants.CHAT_COMMANDS.SLOW:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.SLOW_ON + '/' + channel)];
      case constants.CHAT_COMMANDS.SLOW_OFF:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.SLOW_OFF + '/' + channel)];

      case constants.CHAT_COMMANDS.SUBSCRIBERS:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.SUBS_ON + '/' + channel), utils.resolveOnEvent(chatInstance, constants.EVENTS.ALREADY_SUBS_ON + '/' + channel)];
      case constants.CHAT_COMMANDS.SUBSCRIBERS_OFF:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.SUBS_OFF + '/' + channel), utils.resolveOnEvent(chatInstance, constants.EVENTS.ALREADY_SUBS_OFF + '/' + channel)];

      case constants.CHAT_COMMANDS.TIMEOUT:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.TIMEOUT_SUCCESS + '/' + channel)];

      case constants.CHAT_COMMANDS.UNBAN:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.UNBAN_SUCCESS + '/' + channel), utils.resolveOnEvent(chatInstance, constants.EVENTS.BAD_UNBAN_NO_BAN + '/' + channel)];

      case constants.CHAT_COMMANDS.UNHOST:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.HOST_OFF + '/' + channel)];

      case constants.CHAT_COMMANDS.UNMOD:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.HOST_OFF + '/' + channel)];

      case constants.CHAT_COMMANDS.UNRAID:
        return [utils.resolveOnEvent(chatInstance, constants.EVENTS.UNRAID_SUCCESS + '/' + channel)];

      // Resolver for private messages.
      default:
        return [utils.resolveOnEvent(chatInstance, constants.COMMANDS.USER_STATE + '/' + channel)];
    }
  };
};

exports.factory = factory;
exports.resolvers = resolvers;
//# sourceMappingURL=commands.js.map