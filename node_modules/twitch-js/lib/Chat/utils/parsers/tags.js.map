{"version":3,"sources":["../../../../src/Chat/utils/parsers/tags.js"],"names":["constants","types","clearChat","tags","banReason","generalString","banDuration","generalNumber","globalUserState","emoteSets","userType","username","displayName","privateMessage","userState","privateMessageCheerEvent","bits","event","EVENTS","CHEER","parseInt","roomState","Object","entries","roomStateTags","reduce","tag","value","followersOnly","generalBoolean","userNotice","userNoticeMessageParameters","parameters","MESSAGE_PARAMETER_PREFIX_RE","exec","param","undefined","userNoticeEvent","msgId","USER_NOTICE_MESSAGE_IDS","ANON_GIFT_PAID_UPGRADE","GIFT_PAID_UPGRADE","RESUBSCRIPTION","RAID","RITUAL","SUBSCRIPTION","SUBSCRIPTION_GIFT","SUBSCRIPTION_GIFT_COMMUNITY","badges","emotes"],"mappings":"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","file":"tags.js","sourcesContent":["import { camelCase, gt, toLower, toUpper } from 'lodash'\n\nimport * as constants from '../../constants'\nimport * as types from './types'\n\n/**\n * CLEARCHAT tags\n * @typedef {Object} ClearChatTags\n * @property {string} [banReason]\n * @property {number} [banDuration]\n * @see https://dev.twitch.tv/docs/irc/tags#clearchat-twitch-tags\n */\nconst clearChat = tags => ({\n  ...tags,\n  banReason: types.generalString(tags.banReason),\n  banDuration: types.generalNumber(tags.banDuration),\n})\n\n/**\n * GLOBALUSERSTATE tags\n * @typedef {Object} GlobalUserStateTags\n * @property {Array<string>} emoteSets\n * @property {string} userType\n * @property {string} username\n * @see https://dev.twitch.tv/docs/irc/tags#globaluserstate-twitch-tags\n */\nconst globalUserState = tags => ({\n  ...tags,\n  emoteSets: types.emoteSets(tags.emoteSets),\n  userType: types.userType(tags.userType),\n  username: toLower(tags.displayName),\n})\n\n/** PRIVMSG tags\n * @typedef {UserStateTags} PrivateMessageTags\n * @see https://dev.twitch.tv/docs/irc/tags#privmsg-twitch-tags\n */\nconst privateMessage = (...args) => userState(...args)\n\nconst privateMessageCheerEvent = tags => {\n  return gt(tags.bits, 0)\n    ? { event: constants.EVENTS.CHEER, bits: parseInt(tags.bits, 10) }\n    : {}\n}\n\n/**\n * ROOMSTATE Tag\n * @typedef {Object} RoomStateTags\n * @property {string} [broadcasterLang]\n * @property {booelan} emoteOnly\n * @property {boolean|number} followersOnly\n * @property {boolean} r9k\n * @property {number} slow\n * @property {boolean} subsOnly\n * @see https://dev.twitch.tv/docs/irc/tags#roomstate-twitch-tags\n */\nconst roomState = roomStateTags =>\n  Object.entries(roomStateTags).reduce((tags, [tag, value]) => {\n    switch (tag) {\n      case 'followersOnly':\n        return { ...tags, [tag]: types.followersOnly(value) }\n      // Strings\n      case 'broadcasterLang':\n        return { ...tags, [tag]: types.generalString(value) }\n      // Numbers\n      case 'slow':\n        return { ...tags, [tag]: types.generalNumber(value) }\n      // Booleans\n      case 'emoteOnly':\n      case 'r9k':\n      case 'subsOnly':\n        return { ...tags, [tag]: types.generalBoolean(value) }\n      default:\n        return { ...tags, [tag]: value }\n    }\n  }, {})\n\n/** USERNOTICE tags\n * @typedef {UserStateTags} UserNoticeTags\n * @see https://dev.twitch.tv/docs/irc/tags#usernotice-twitch-tags\n */\nconst userNotice = (...args) => userState(...args)\n\nconst userNoticeMessageParameters = tags =>\n  Object.entries(tags).reduce((parameters, [tag, value]) => {\n    const [, param] = constants.MESSAGE_PARAMETER_PREFIX_RE.exec(tag) || []\n\n    switch (param) {\n      // Numbers.\n      case 'Months':\n      case 'MassGiftCount':\n      case 'PromoGiftTotal':\n      case 'SenderCount':\n      case 'ViewerCount':\n        return { ...parameters, [camelCase(param)]: types.generalNumber(value) }\n      // Not a msgParam.\n      case undefined:\n        return parameters\n      // Strings\n      default:\n        return { ...parameters, [camelCase(param)]: types.generalString(value) }\n    }\n  }, {})\n\nconst userNoticeEvent = tags => {\n  switch (tags.msgId) {\n    case constants.USER_NOTICE_MESSAGE_IDS.ANON_GIFT_PAID_UPGRADE:\n      return constants.EVENTS.ANON_GIFT_PAID_UPGRADE\n    case constants.USER_NOTICE_MESSAGE_IDS.GIFT_PAID_UPGRADE:\n      return constants.EVENTS.GIFT_PAID_UPGRADE\n    case constants.USER_NOTICE_MESSAGE_IDS.RESUBSCRIPTION:\n      return constants.EVENTS.RESUBSCRIPTION\n    case constants.USER_NOTICE_MESSAGE_IDS.RAID:\n      return constants.EVENTS.RAID\n    case constants.USER_NOTICE_MESSAGE_IDS.RITUAL:\n      return constants.EVENTS.RITUAL\n    case constants.USER_NOTICE_MESSAGE_IDS.SUBSCRIPTION:\n      return constants.EVENTS.SUBSCRIPTION\n    case constants.USER_NOTICE_MESSAGE_IDS.SUBSCRIPTION_GIFT:\n      return constants.EVENTS.SUBSCRIPTION_GIFT\n    case constants.USER_NOTICE_MESSAGE_IDS.SUBSCRIPTION_GIFT_COMMUNITY:\n      return constants.EVENTS.SUBSCRIPTION_GIFT_COMMUNITY\n    default:\n      return toUpper(tags.msgId)\n  }\n}\n\n/**\n * USERSTATE tags\n * @typedef {Object} UserStateTags\n * @property {BadgesTag} badges\n * @property {Array<EmoteTag>} emotes\n * @property {Array<string>} emoteSets\n * @property {number} [bits]\n * @see https://dev.twitch.tv/docs/irc/tags#userstate-twitch-tags\n */\nconst userState = tags => ({\n  ...tags,\n  badges: types.badges(tags.badges),\n  bits: types.generalNumber(tags.bits),\n  emotes: types.emotes(tags.emotes),\n  emoteSets: types.emoteSets(tags.emoteSets),\n  userType: types.userType(tags.userType),\n})\n\nexport {\n  clearChat,\n  globalUserState,\n  privateMessage,\n  privateMessageCheerEvent,\n  roomState,\n  userNotice,\n  userNoticeMessageParameters,\n  userNoticeEvent,\n  userState,\n}\n"]}