{"version":3,"sources":["../../../../src/Chat/utils/parsers/types.js"],"names":["generalString","maybeMessage","undefined","generalNumber","number","parseInt","maybeNumber","generalBoolean","maybeBoolean","generalTimestamp","timestamp","Date","maybeTimestamp","toString","usernameFromPrefix","maybePrefix","exec","username","userType","maybeUserType","broadcasterLanguage","maybeLanguage","followersOnly","followersOnlyAsNumber","maybeFollowersOnly","badges","maybeBadges","split","reduce","parsed","badge","rawKey","value","key","emotes","maybeEmotes","emoteTag","emoteIndices","id","indices","map","index","start","end","emoteSets","maybeEmoteSets","mods","message","modList"],"mappings":"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","file":"types.js","sourcesContent":["import { isFinite, replace, camelCase } from 'lodash'\n\nconst generalString = maybeMessage => {\n  return typeof maybeMessage === 'string'\n    ? replace(maybeMessage, /\\\\[sn]/g, ' ')\n    : undefined\n}\n\nconst generalNumber = maybeNumber => {\n  const number = parseInt(maybeNumber, 10)\n  return isFinite(number) ? number : undefined\n}\n\nconst generalBoolean = maybeBoolean => maybeBoolean === '1'\n\nconst generalTimestamp = maybeTimestamp => {\n  const timestamp = new Date(parseInt(maybeTimestamp, 10))\n  return timestamp.toString() !== 'Invalid Date' ? timestamp : new Date()\n}\n\nconst usernameFromPrefix = maybePrefix => {\n  if (typeof maybePrefix !== 'string') {\n    return undefined\n  }\n\n  const [, username] = /([^!]+)/.exec(maybePrefix)\n  return username\n}\n\nconst userType = maybeUserType => {\n  return typeof maybeUserType === 'string' ? maybeUserType : undefined\n}\n\nconst broadcasterLanguage = maybeLanguage => {\n  return typeof maybeLanguage === 'string' ? maybeLanguage : undefined\n}\n\nconst followersOnly = maybeFollowersOnly => {\n  const followersOnlyAsNumber = parseInt(maybeFollowersOnly, 10)\n\n  if (followersOnlyAsNumber === 0) {\n    return true\n  } else if (followersOnlyAsNumber > 0) {\n    return followersOnlyAsNumber\n  }\n\n  return false\n}\n\nconst badges = maybeBadges => {\n  /**\n   * Badges tag\n   * @typedef {Object} BadgesTag\n   * @property {boolean} [admin]\n   * @property {number} [bits]\n   * @property {number} [bitsLeader]\n   * @property {boolean} [broadcaster]\n   * @property {boolean} [globalMod]\n   * @property {boolean} [moderator]\n   * @property {boolean} [partner]\n   * @property {boolean} [premium]\n   * @property {boolean} [staff]\n   * @property {boolean} [subGifter]\n   * @property {number} [subscriber]\n   * @property {boolean} [turbo]\n   * @property {boolean} [vip]\n   * @see https://dev.twitch.tv/docs/irc/tags/#privmsg-twitch-tags\n   */\n  return typeof maybeBadges === 'string'\n    ? maybeBadges.split(',').reduce((parsed, badge) => {\n        const [rawKey, value] = badge.split('/')\n        const key = camelCase(rawKey)\n\n        switch (key) {\n          // Booleans\n          case 'admin':\n          case 'broadcaster':\n          case 'globalMod':\n          case 'moderator':\n          case 'partner':\n          case 'premium':\n          case 'staff':\n          case 'subGifter':\n          case 'turbo':\n          case 'vip':\n            return { ...parsed, [key]: generalBoolean(value) }\n          // Numbers\n          case 'bits':\n          case 'bitsLeader':\n          case 'subscriber':\n            return { ...parsed, [key]: parseInt(value, 10) }\n          default:\n            return { ...parsed, [key]: value }\n        }\n      }, {})\n    : {}\n}\n\nconst emotes = maybeEmotes => {\n  if (typeof maybeEmotes !== 'string') {\n    return []\n  }\n\n  /**\n   * Emote tag\n   * @typedef {Object} EmoteTag\n   * @property {string} id ID\n   * @property {number} start Starting index\n   * @property {number} end Ending index\n   * @see https://dev.twitch.tv/docs/irc/tags/#privmsg-twitch-tags\n   */\n  return maybeEmotes.split('/').reduce((emoteTag, emoteIndices) => {\n    const [id, indices] = emoteIndices.split(':')\n\n    return [\n      ...emoteTag,\n      ...indices.split(',').map(index => {\n        const [start, end] = index.split('-')\n        return { id, start: parseInt(start, 10), end: parseInt(end, 10) }\n      }),\n    ]\n  }, [])\n}\n\nconst emoteSets = maybeEmoteSets => {\n  return typeof maybeEmoteSets === 'string'\n    ? maybeEmoteSets.split(',')\n    : undefined\n}\n\nconst mods = message => {\n  const [, modList] = message.split(': ')\n  return modList.split(', ')\n}\n\nexport {\n  generalString,\n  generalNumber,\n  generalBoolean,\n  generalTimestamp,\n  usernameFromPrefix,\n  userType,\n  broadcasterLanguage,\n  followersOnly,\n  badges,\n  emotes,\n  emoteSets,\n  mods,\n}\n"]}