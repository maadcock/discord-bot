{"version":3,"sources":["../../../../src/Chat/utils/parsers/index.js"],"names":["constants","utils","typeParsers","tagParsers","base","rawMessagesV","rawMessages","split","messages","forEach","rawMessage","length","raw","tags","command","prefix","params","channel","message","push","_raw","timestamp","generalTimestamp","parseInt","username","usernameFromPrefix","joinOrPartMessage","exec","baseMessage","undefined","modeMessage","mode","isModerator","event","EVENTS","MOD_GAINED","MOD_LOST","namesMessage","names","namesV","NAMES","usernames","namesEndMessage","NAMES_END","globalUserStateMessage","other","globalUserState","clearChatMessage","banReason","generalString","banDuration","generalNumber","USER_BANNED","hostTargetMessage","numberOfViewers","isStopped","NOTICE_MESSAGE_IDS","HOST_OFF","HOST_ON","roomStateMessage","roomState","noticeMessage","baseTags","isAuthenticationFailedMessage","msgId","AUTHENTICATION_FAILED","ROOM_MODS","mods","userStateMessage","userState","privateMessage","privateMessageCheerEvent","PRIVATE_MESSAGE_HOSTED_RE","isHostingPrivateMessage","displayName","isAuto","HOSTED_AUTO","HOSTED_WITH_VIEWERS","HOSTED_WITHOUT_VIEWERS","userNoticeMessage","userNotice","USER_NOTICE_MESSAGE_IDS","ANON_GIFT_PAID_UPGRADE","GIFT_PAID_UPGRADE","RAID","RESUBSCRIPTION","RITUAL","SUBSCRIPTION_GIFT_COMMUNITY","SUBSCRIPTION_GIFT","SUBSCRIPTION","systemMsg","parameters","userNoticeMessageParameters","userNoticeEvent","systemMessage"],"mappings":"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","file":"index.js","sourcesContent":["import { parse } from 'irc-message'\nimport camelcaseKeys from 'camelcase-keys'\n\nimport { has, isEmpty, isFinite, toNumber, toUpper } from 'lodash'\n\nimport * as constants from '../../constants'\nimport * as utils from '../'\nimport * as typeParsers from './types'\nimport * as tagParsers from './tags'\n\nconst base = rawMessages => {\n  const rawMessagesV = rawMessages.split(/\\r?\\n/g)\n  const messages = []\n\n  rawMessagesV.forEach(rawMessage => {\n    if (!rawMessage.length) {\n      return\n    }\n\n    const { raw, tags, command, prefix, params: [channel, message] } = parse(\n      rawMessage,\n    )\n\n    /**\n     * Base message parsed from Twitch\n     * @mixin BaseMessage\n     * @property {string} _raw Un-parsed message\n     * @property {Date} timestamp Timestamp\n     * @property {string} username Username\n     * @property {string} command Command\n     * @property {string} [channel] Channel\n     * @property {(ClearChatTags|GlobalUserStateTags|PrivateMessageTags|RoomStateTags|UserNoticeTags|UserStateTags)} tags Twitch tags\n     * @property {string} [message] Message\n     */\n    messages.push({\n      _raw: raw,\n      timestamp: typeParsers.generalTimestamp(\n        parseInt(tags['tmi-sent-ts'], 10),\n      ),\n      username: typeParsers.usernameFromPrefix(prefix),\n      command,\n      channel: channel !== '*' ? channel : '',\n      tags: isEmpty(tags) ? {} : camelcaseKeys(tags),\n      message,\n    })\n  })\n\n  return messages\n}\n\nconst joinOrPartMessage = baseMessage => {\n  const [\n    ,\n    username,\n    ,\n    ,\n    command,\n    channel,\n  ] = /:(.+)!(.+)@(.+).tmi.twitch.tv (JOIN|PART) (#.+)/g.exec(baseMessage._raw)\n\n  /**\n   * Join a channel.\n   * @event Chat#JOIN\n   * @mixes BaseMessage JoinOrPartMessage\n   * @property {string} username Username (lower-case)\n   * @see https://dev.twitch.tv/docs/irc/membership/#join-twitch-membership\n   */\n  /**\n   * Depart from a channel.\n   * @event Chat#PART\n   * @mixes BaseMessage JoinOrPartMessage\n   * @property {string} username Username (lower-case)\n   * @see https://dev.twitch.tv/docs/irc/membership/#part-twitch-membership\n   */\n  return {\n    ...baseMessage,\n    channel,\n    command,\n    username,\n    message: undefined,\n  }\n}\n\nconst modeMessage = baseMessage => {\n  const [\n    ,\n    channel,\n    mode,\n    username,\n  ] = /:[^\\s]+ MODE (#[^\\s]+) (-|\\+)o ([^\\s]+)/g.exec(baseMessage._raw)\n\n  const isModerator = mode === '+'\n\n  /**\n   * Gain/lose moderator (operator) status in a channel.\n   * @event Chat#MODE\n   * @mixes BaseMessage ModeMessage\n   * @property {string} event\n   * @property {string} username\n   * @property {boolean} isModerator\n   * @see https://dev.twitch.tv/docs/irc/membership/#mode-twitch-membership\n   */\n  return {\n    ...baseMessage,\n    event: isModerator\n      ? constants.EVENTS.MOD_GAINED\n      : constants.EVENTS.MOD_LOST,\n    channel,\n    username,\n    message: `${mode}o`,\n    isModerator,\n  }\n}\n\nconst namesMessage = baseMessage => {\n  const [\n    ,\n    ,\n    ,\n    channel,\n    names,\n  ] = /:(.+).tmi.twitch.tv 353 (.+) = (#.+) :(.+)/g.exec(baseMessage._raw)\n\n  const namesV = names.split(' ')\n\n  /**\n   * List current chatters in a channel.\n   * @event Chat#NAMES\n   * @mixes BaseMessage NamesMessage\n   * @property {Array<string>} usernames Array of usernames present in channel\n   * @see https://dev.twitch.tv/docs/irc/membership/#names-twitch-membership\n   */\n  return {\n    ...baseMessage,\n    channel,\n    event: constants.EVENTS.NAMES,\n    usernames: namesV,\n    message: undefined,\n  }\n}\n\nconst namesEndMessage = baseMessage => {\n  const [\n    ,\n    username,\n    ,\n    channel,\n    message,\n  ] = /:(.+).tmi.twitch.tv 366 (.+) (#.+) :(.+)/g.exec(baseMessage._raw)\n\n  /**\n   * End of list current chatters in a channel.\n   * @event Chat#NAMES_END\n   * @mixes BaseMessage NamesEndMessage\n   * @see https://dev.twitch.tv/docs/irc/membership/#names-twitch-membership\n   */\n  return {\n    ...baseMessage,\n    channel,\n    event: constants.EVENTS.NAMES_END,\n    username,\n    message,\n  }\n}\n\nconst globalUserStateMessage = baseMessage => {\n  const { tags, ...other } = baseMessage\n\n  /**\n   * GLOBALUSERSTATE message\n   * @mixin GlobalUserStateMessage\n   * @mixes BaseMessage\n   * @property {GlobalUserStateTags} tags\n   */\n  /**\n   * On successful login.\n   * @event Chat#GLOBALUSERSTATE\n   * @mixes GlobalUserStateMessage\n   */\n  return {\n    tags: tagParsers.globalUserState(tags),\n    ...other,\n  }\n}\n\nconst clearChatMessage = baseMessage => {\n  const { tags, message: username, ...other } = baseMessage\n\n  if (typeof username !== 'undefined') {\n    /**\n     * Temporary or permanent ban on a channel.\n     * @event Chat#CLEARCHAT/USER_BANNED\n     * @mixes BaseMessage ClearChatUserBannedMessage\n     * @property {ClearChatTags} tags\n     * @property {string} username\n     * @see https://dev.twitch.tv/docs/irc/commands/#clearchat-twitch-commands\n     * @see https://dev.twitch.tv/docs/irc/tags/#clearchat-twitch-tags\n     */\n    return {\n      ...other,\n      tags: {\n        ...tags,\n        banReason: typeParsers.generalString(tags.banReason),\n        banDuration: typeParsers.generalNumber(tags.banDuration),\n      },\n      event: constants.EVENTS.USER_BANNED,\n      username,\n    }\n  }\n\n  /**\n   * All chat is cleared (deleted).\n   * @event Chat#CLEARCHAT\n   * @mixes BaseMessage ClearChatMessage\n   * @see https://dev.twitch.tv/docs/irc/commands/#clearchat-twitch-commands\n   * @see https://dev.twitch.tv/docs/irc/tags/#clearchat-twitch-tags\n   */\n  return {\n    ...other,\n  }\n}\n\nconst hostTargetMessage = baseMessage => {\n  const [\n    ,\n    channel,\n    username,\n    numberOfViewers,\n  ] = /:tmi.twitch.tv HOSTTARGET (#[^\\s]+) :([^\\s]+)?\\s?(\\d+)?/g.exec(\n    baseMessage._raw,\n  )\n  const isStopped = username === '-'\n\n  /**\n   * Host starts or stops a message.\n   * @event Chat#HOSTTARGET\n   * @mixes BaseMessage HostTargetMessage\n   * @property {number} [numberOfViewers] Number of viewers\n   * @see https://dev.twitch.tv/docs/irc/commands/#hosttarget-twitch-commands\n   */\n  return {\n    ...baseMessage,\n    channel,\n    username,\n    event: toUpper(\n      isStopped\n        ? constants.NOTICE_MESSAGE_IDS.HOST_OFF\n        : constants.NOTICE_MESSAGE_IDS.HOST_ON,\n    ),\n    numberOfViewers: isFinite(toNumber(numberOfViewers))\n      ? parseInt(numberOfViewers, 10)\n      : undefined,\n    message: undefined,\n  }\n}\n\nconst roomStateMessage = baseMessage => {\n  const { tags, ...other } = baseMessage\n\n  /**\n   * When a user joins a channel or a room setting is changed.\n   * @event Chat#ROOMSTATE\n   * @mixes BaseMessage RoomStateMessage\n   * @property {RoomStateTags} tags\n   */\n  return {\n    tags: tagParsers.roomState(tags),\n    ...other,\n  }\n}\n\nconst noticeMessage = baseMessage => {\n  const { tags: baseTags, ...other } = baseMessage\n\n  const tags = utils.isAuthenticationFailedMessage(baseMessage)\n    ? { ...baseTags, msgId: constants.EVENTS.AUTHENTICATION_FAILED }\n    : baseTags\n\n  const event = toUpper(tags.msgId)\n\n  switch (tags.msgId) {\n    case constants.NOTICE_MESSAGE_IDS.ROOM_MODS:\n      /**\n       * NOTICE/ROOM_MODS message\n       * @event Chat#NOTICE/ROOM_MODS\n       * @mixes NoticeMessage NoticeMessage\n       * @property {'ROOM_MODS'} event\n       * @property {Array<string>} mods\n       */\n      return { event, tags, mods: typeParsers.mods(other.message), ...other }\n    default:\n      /**\n       * @event Chat#NOTICE\n       * @mixes NoticeMessage\n       * @property {string} event `msg-id` tag (snake uppercase)\n       * @property {Object} tags\n       * @see https://dev.twitch.tv/docs/irc/commands/#msg-id-tags-for-the-notice-commands-capability\n       */\n\n      /**\n       * NOTICE message\n       * @mixin NoticeMessage\n       * @property {string} event `msg-id` tag (snake uppercase)\n       * @property {Object} tags\n       */\n      return { event, tags, ...other }\n  }\n}\n\nconst userStateMessage = baseMessage => {\n  const { tags, ...other } = baseMessage\n\n  /**\n   * USERSTATE message\n   * @mixin UserStateMessage\n   * @mixes BaseMessage\n   * @property {UserStateTags} tags\n   */\n  /**\n   * When a user joins a channel or sends a PRIVMSG to a channel.\n   * @event Chat#USERSTATE\n   * @mixes UserStateMessage UserStateMessage\n   */\n  return {\n    tags: tagParsers.userState(tags),\n    ...other,\n  }\n}\n\n/**\n * When a user joins a channel or sends a PRIVMSG to a channel.\n * @event Chat#PRIVMSG\n * @mixes UserStateMessage PrivateMessage\n */\nconst privateMessage = baseMessage => {\n  const { _raw, tags } = baseMessage\n\n  if (has(baseMessage, 'tags.bits')) {\n    /**\n     * When a user cheers a channel.\n     * @event Chat#PRIVMSG/CHEER\n     * @mixes UserStateMessage PrivateMessage\n     * @property {'CHEER'} event\n     * @property {number} bits\n     */\n    return {\n      ...userStateMessage(baseMessage),\n      ...tagParsers.privateMessageCheerEvent(tags),\n    }\n  }\n\n  const [\n    isHostingPrivateMessage,\n    channel,\n    displayName,\n    isAuto,\n    numberOfViewers,\n  ] =\n    constants.PRIVATE_MESSAGE_HOSTED_RE.exec(_raw) || []\n\n  if (isHostingPrivateMessage) {\n    /**\n     * When a user hosts your channel while connected as broadcaster.\n     * @event Chat#PRIVMSG/HOSTED\n     * @mixes UserStateMessage PrivateMessage\n     * @property {'HOSTED/WITH_VIEWERS'|'HOSTED/WITHOUT_VIEWERS'|'HOSTED/AUTO'} event\n     * @property {Object} tags\n     * @property {string} tags.displayName\n     * @property {number} [numberOfViewers]\n     */\n\n    return {\n      ...baseMessage,\n      tags: { displayName },\n      channel: `#${channel}`,\n      event: isAuto\n        ? constants.EVENTS.HOSTED_AUTO\n        : numberOfViewers\n          ? constants.EVENTS.HOSTED_WITH_VIEWERS\n          : constants.EVENTS.HOSTED_WITHOUT_VIEWERS,\n      numberOfViewers: typeParsers.generalNumber(numberOfViewers),\n    }\n  }\n\n  return userStateMessage(baseMessage)\n}\n\n/**\n * USERNOTICE message\n * @mixin UserNoticeMessage\n * @mixes BaseMessage\n * @property {string} event\n * @property {Object} parameters\n * @property {string} systemMessage\n */\nconst userNoticeMessage = baseMessage => {\n  const tags = tagParsers.userNotice(baseMessage.tags)\n\n  /* eslint-disable no-fallthrough */\n  switch (tags.msgId) {\n    /**\n     * On anonymous gifted subscription paid upgrade to a channel.\n     * @event Chat#USERNOTICE/ANON_GIFT_PAID_UPGRADE\n     * @mixes UserStateMessage AnonGiftPaidUpgradeMessage\n     * @property {'ANON_GIFT_PAID_UPGRADE'} event\n     */\n    case constants.USER_NOTICE_MESSAGE_IDS.ANON_GIFT_PAID_UPGRADE:\n\n    /**\n     * On gifted subscription paid upgrade to a channel.\n     * @event Chat#USERNOTICE/GIFT_PAID_UPGRADE\n     * @mixes UserStateMessage GiftPaidUpgradeMessage\n     * @property {'GIFT_PAID_UPGRADE'} event\n     * @property {Object} parameters\n     * @property {number} parameters.promoGiftTotal\n     * @property {string} parameters.promoName\n     * @property {string} parameters.senderLogin\n     * @property {string} parameters.senderName\n     */\n    case constants.USER_NOTICE_MESSAGE_IDS.GIFT_PAID_UPGRADE:\n\n    /**\n     * On channel raid.\n     * @event Chat#USERNOTICE/RAID\n     * @mixes UserStateMessage\n     * @property {'RAID'} event\n     * @property {Object} parameters\n     * @property {string} parameters.displayName\n     * @property {string} parameters.login\n     * @property {number} parameters.viewerCount\n     */\n    case constants.USER_NOTICE_MESSAGE_IDS.RAID:\n\n    /**\n     * On resubscription (subsequent months) to a channel.\n     * @event Chat#USERNOTICE/RESUBSCRIPTION\n     * @mixes UserStateMessage\n     * @property {'RESUBSCRIPTION'} event\n     * @property {Object} parameters\n     * @property {number} parameters.months\n     * @property {string} parameters.subPlan\n     * @property {string} parameters.subPlanName\n     */\n    case constants.USER_NOTICE_MESSAGE_IDS.RESUBSCRIPTION:\n\n    /**\n     * On channel ritual.\n     * @event Chat#USERNOTICE/RITUAL\n     * @mixes UserStateMessage\n     * @property {'RITUAL'} event\n     * @property {Object} parameters\n     * @property {string} parameters.ritualName\n     */\n    case constants.USER_NOTICE_MESSAGE_IDS.RITUAL:\n\n    /**\n     * On subscription gift to a channel community.\n     * @event Chat#USERNOTICE/SUBSCRIPTION_GIFT_COMMUNITY\n     * @mixes UserStateMessage\n     * @property {'SUBSCRIPTION_GIFT_COMMUNITY'} event\n     * @property {Object} parameters\n     * @property {number} parameters.massGiftCount\n     * @property {number} parameters.senderCount\n     * @property {string} parameters.subPlan\n     */\n    case constants.USER_NOTICE_MESSAGE_IDS.SUBSCRIPTION_GIFT_COMMUNITY:\n\n    /**\n     * On subscription gift to a channel.\n     * @event Chat#USERNOTICE/SUBSCRIPTION_GIFT\n     * @mixes UserStateMessage\n     * @property {'SUBSCRIPTION_GIFT'} event\n     * @property {Object} parameters\n     * @property {number} parameters.months\n     * @property {string} parameters.subPlan\n     * @property {string} parameters.subPlanName\n     * @property {string} parameters.recipientDisplayName\n     * @property {string} parameters.recipientId\n     * @property {string} parameters.recipientName\n     */\n    case constants.USER_NOTICE_MESSAGE_IDS.SUBSCRIPTION_GIFT:\n\n    /**\n     * On subscription (first month) to a channel.\n     * @event Chat#USERNOTICE/SUBSCRIPTION\n     * @mixes UserStateMessage\n     * @property {'SUBSCRIPTION'} event\n     * @property {Object} parameters\n     * @property {1} parameters.months\n     * @property {string} parameters.subPlan\n     * @property {string} parameters.subPlanName\n     */\n    case constants.USER_NOTICE_MESSAGE_IDS.SUBSCRIPTION:\n\n    default:\n      return {\n        ...baseMessage,\n        tags: { ...tags, systemMsg: typeParsers.generalString(tags.systemMsg) },\n        parameters: tagParsers.userNoticeMessageParameters(tags),\n        event: tagParsers.userNoticeEvent(tags),\n        systemMessage: typeParsers.generalString(tags.systemMsg),\n      }\n  }\n  /* eslint-enable no-fallthrough */\n}\n\nexport {\n  modeMessage,\n  hostTargetMessage,\n  joinOrPartMessage,\n  namesMessage,\n  namesEndMessage,\n  clearChatMessage,\n  globalUserStateMessage,\n  userStateMessage,\n  roomStateMessage,\n  noticeMessage,\n  userNoticeMessage,\n  privateMessage,\n}\nexport default base\n"]}