{"version":3,"sources":["../../src/Chat/index.js"],"names":["utils","chatUtils","Errors","constants","commands","parsers","sanitizers","validators","Chat","maybeOptions","_readyState","_connectionAttempts","_connectionInProgress","_userState","_channelState","connect","Promise","race","rejectAfter","options","connectionTimeout","TimeoutError","ERROR_CONNECT_TIMED_OUT","_handleConnectionAttempt","then","_handleConnectSuccess","bind","catch","_handleConnectRetry","send","message","_client","disconnect","reconnect","newOptions","channels","_getChannels","all","map","join","channel","maybeChannel","_log","info","joinProfiler","startTimer","promises","resolveOnEvent","COMMANDS","ROOM_STATE","isUserAnonymous","username","push","USER_STATE","roomState","userState","channelState","tags","_setChannelState","done","JOIN","joinTimeout","ERROR_JOIN_TIMED_OUT","part","_removeChannelState","PART","say","messageArgs","args","length","isModerator","timeout","ERROR_SAY_TIMED_OUT","commandResolvers","resolvers","resolveInSequence","_isUserAuthenticated","PRIVATE_MESSAGE","resolvedEvent","error","err","reject","whisper","user","WHISPER","broadcast","scope","log","Object","assign","factory","token","resolve","connectProfiler","removeAllListeners","on","EVENTS","ALL","_handleMessage","DISCONNECTED","_handleDisconnect","once","RECONNECT","AUTHENTICATION_FAILED","CONNECTED","e","globalUserState","event","onAuthenticationFailure","resolveAfter","AuthenticationError","Error","eventName","displayName","split","filter","reduce","parents","eventParts","keys","state","entries","channelStates","name","baseMessage","selfUsername","messageUsername","isSelf","preMessage","command","joinOrPartMessage","NAMES","namesMessage","NAMES_END","namesEndMessage","CLEAR_CHAT","clearChatMessage","HOST_TARGET","hostTargetMessage","MODE","modeMessage","_getChannelState","GLOBAL_USER_STATE","globalUserStateMessage","userStateMessage","roomStateMessage","NOTICE","noticeMessage","USER_NOTICE","userNoticeMessage","privateMessage","getEventNameFromMessage","_emit","_options","chatOptions"],"mappings":"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","file":"index.js","sourcesContent":["/**\n * EventEmitter3 is a high performance EventEmitter\n * @external EventEmitter3\n * @see {@link https://github.com/primus/eventemitter3 EventEmitter3}\n */\n\nimport { EventEmitter } from 'eventemitter3'\n\nimport { get } from 'lodash'\n\nimport createLogger from '../utils/logger/create'\n\nimport * as utils from '../utils'\nimport * as chatUtils from './utils'\n\nimport Client from './Client'\nimport * as Errors from './Errors'\n\nimport * as constants from './constants'\nimport * as commands from './utils/commands'\nimport * as parsers from './utils/parsers'\nimport * as sanitizers from './utils/sanitizers'\nimport * as validators from './utils/validators'\n\n/**\n * @class\n * @public\n * @extends EventEmitter\n * @classdesc Twitch Chat Client\n *\n * @emits Chat#*\n * @emits Chat#CLEARCHAT\n * @emits Chat#CLEARCHAT/USER_BANNED\n * @emits Chat#GLOBALUSERSTATE\n * @emits Chat#HOSTTARGET\n * @emits Chat#JOIN\n * @emits Chat#MODE\n * @emits Chat#NAMES\n * @emits Chat#NAMES_END\n * @emits Chat#NOTICE\n * @emits Chat#NOTICE/ROOM_MODS\n * @emits Chat#PART\n * @emits Chat#PRIVMSG\n * @emits Chat#PRIVMSG/CHEER\n * @emits Chat#ROOMSTATE\n * @emits Chat#USERNOTICE\n * @emits Chat#USERNOTICE/ANON_GIFT_PAID_UPGRADE\n * @emits Chat#USERNOTICE/GIFT_PAID_UPGRADE\n * @emits Chat#USERNOTICE/RAID\n * @emits Chat#USERNOTICE/RESUBSCRIPTION\n * @emits Chat#USERNOTICE/RITUAL\n * @emits Chat#USERNOTICE/SUBSCRIPTION\n * @emits Chat#USERNOTICE/SUBSCRIPTION_GIFT\n * @emits Chat#USERSTATE\n *\n * @example <caption>Connecting to Twitch and joining #dallas</caption>\n * const token = 'cfabdegwdoklmawdzdo98xt2fo512y'\n * const username = 'ronni'\n * const channel = '#dallas'\n * const { chat } = new TwitchJs({ token, username })\n *\n * chat.connect().then(globalUserState => {\n *   // Listen to all messages\n *   chat.on('*', message => {\n *     // Do stuff with message ...\n *   })\n *\n *   // Listen to PRIVMSG\n *   chat.on('PRIVMSG', privateMessage => {\n *     // Do stuff with privateMessage ...\n *   })\n *\n *   // Do other stuff ...\n *\n *   chat.join(channel).then(channelState => {\n *     // Do stuff with channelState...\n *   })\n * })\n */\nclass Chat extends EventEmitter {\n  /** @private */\n  _options\n\n  /** @private */\n  _log\n\n  /** @private */\n  _readyState = 0\n\n  /** @private */\n  _connectionAttempts = 0\n  /** @private */\n  _connectionInProgress = null\n\n  /** @private */\n  _userState = {}\n  /** @private */\n  _channelState = {}\n\n  /**\n   * Chat constructor.\n   * @param {ChatOptions} options\n   */\n  constructor(maybeOptions) {\n    super()\n\n    this.options = maybeOptions\n\n    /**\n     * @type {any}\n     * @private\n     */\n    this._log = createLogger({ scope: 'Chat', ...this.options.log })\n\n    // Create commands.\n    Object.assign(this, commands.factory(this))\n  }\n\n  /**\n   * @function Chat#getOptions\n   * @public\n   * @desc Retrieves the current [ChatOptions]{@link Chat#ChatOptions}\n   * @return {ChatOptions} Options of the client\n   */\n  get options() {\n    return this._options\n  }\n\n  /**\n   * @function Chat#setOptions\n   * @public\n   * @desc Validates the passed options before changing `_options`\n   * @param {ChatOptions} options\n   */\n  set options(maybeOptions) {\n    this._options = validators.chatOptions(maybeOptions)\n  }\n\n  /**\n   * @function Chat#connect\n   * @public\n   * @desc Connect to Twitch.\n   * @return {Promise<?GlobalUserStateMessage, string>} Global user state message\n   */\n  connect = () => {\n    if (this._connectionInProgress) {\n      return this._connectionInProgress\n    }\n\n    this._connectionInProgress = Promise.race([\n      utils.rejectAfter(\n        this.options.connectionTimeout,\n        new Errors.TimeoutError(constants.ERROR_CONNECT_TIMED_OUT),\n      ),\n      this._handleConnectionAttempt(),\n    ])\n      .then(this._handleConnectSuccess.bind(this))\n      .catch(this._handleConnectRetry.bind(this))\n\n    return this._connectionInProgress\n  }\n\n  /**\n   * @function Chat#updateOptions\n   * @public\n   * @desc Updates the clients options after first instantiation.\n   * @param {ApiOptions} options New client options. To update `token` or `username`, use [**api.reconnect()**]{@link Chat#reconnect}.\n   */\n  updateOptions(options) {\n    const { token, username } = this.options\n    this.options = { ...options, token, username }\n  }\n\n  /**\n   * @function Chat#send\n   * @public\n   * @desc Sends a raw message to Twitch.\n   * @param {string} message - Message to send.\n   * @return {Promise} Resolves on success, rejects on failure.\n   */\n  send = (message, options) => this._client.send(message, options)\n\n  /**\n   * @function Chat#disconnect\n   * @public\n   * @desc Disconnected from Twitch.\n   */\n  disconnect = () => this._client.disconnect()\n\n  /**\n   * @function Chat#reconnect\n   * @public\n   * @desc Reconnect to Twitch.\n   * @param {object} newOptions Provide new options to client.\n   * @return {Promise<Array<ChannelState>, string>}\n   */\n  reconnect = newOptions => {\n    if (newOptions) {\n      this.options = { ...this.options, ...newOptions }\n    }\n\n    this._connectionInProgress = null\n    this._readyState = 2\n\n    const channels = this._getChannels()\n    this.disconnect()\n\n    return this.connect().then(() =>\n      Promise.all(channels.map(channel => this.join(channel))),\n    )\n  }\n\n  /**\n   * @function Chat#join\n   * @public\n   * @desc Join a channel.\n   * @param {string} channel\n   * @return {Promise<ChannelState, string>}\n   *\n   * @example <caption>Joining #dallas</caption>\n   * const channel = '#dallas'\n   *\n   * chat.join(channel).then(channelState => {\n   *   // Do stuff with channelState...\n   * })\n   *\n   * @example <caption>Joining multiple channels</caption>\n   * const channels = ['#dallas', '#ronni']\n   *\n   * Promise.all(channels.map(channel => chat.join(channel)))\n   *   .then(channelStates => {\n   *     // Listen to all PRIVMSG\n   *     chat.on('PRIVMSG', privateMessage => {\n   *       // Do stuff with privateMessage ...\n   *     })\n   *\n   *     // Listen to PRIVMSG from #dallas ONLY\n   *     chat.on('PRIVMSG/#dallas', privateMessage => {\n   *       // Do stuff with privateMessage ...\n   *     })\n   *     // Listen to all PRIVMSG from #ronni ONLY\n   *     chat.on('PRIVMSG/#ronni', privateMessage => {\n   *       // Do stuff with privateMessage ...\n   *     })\n   *   })\n   */\n  join = maybeChannel => {\n    const channel = sanitizers.channel(maybeChannel)\n\n    this._log.info(`Joining ${channel}`)\n    const joinProfiler = this._log.startTimer()\n\n    const promises = [\n      this.connect(),\n      utils.resolveOnEvent(this, `${constants.COMMANDS.ROOM_STATE}/${channel}`),\n    ]\n\n    if (!chatUtils.isUserAnonymous(this.options.username)) {\n      promises.push(\n        utils.resolveOnEvent(\n          this,\n          `${constants.COMMANDS.USER_STATE}/${channel}`,\n        ),\n      )\n    }\n\n    const join = Promise.all(promises).then(([, roomState, userState]) => {\n      /**\n       * @typedef {Object} ChannelState\n       * Channel state information\n       * @property {RoomStateTags} roomState\n       * @property {?UserStateTags} userState\n       */\n\n      const channelState = {\n        roomState: roomState.tags,\n        userState: get(userState, 'tags', null),\n      }\n\n      this._setChannelState(roomState.channel, channelState)\n\n      joinProfiler.done({ message: `Joined ${channel}` })\n      return channelState\n    })\n\n    const send = this.send(`${constants.COMMANDS.JOIN} ${channel}`)\n\n    return send.then(() =>\n      Promise.race([\n        utils.rejectAfter(\n          this.options.joinTimeout,\n          new Errors.TimeoutError(constants.ERROR_JOIN_TIMED_OUT),\n        ),\n        join,\n      ]),\n    )\n  }\n\n  /**\n   * @function Chat#part\n   * @public\n   * @desc Depart from a channel.\n   * @param {string} channel\n   */\n  part = maybeChannel => {\n    const channel = sanitizers.channel(maybeChannel)\n    this._log.info(`Parting ${channel}`)\n\n    this._removeChannelState(channel)\n    this.send(`${constants.COMMANDS.PART} ${channel}`)\n  }\n\n  /**\n   * @function Chat#say\n   * @public\n   * @desc Send a message to a channel.\n   * @param {string} channel\n   * @param {string} message\n   * @return {Promise<?UserStateMessage, string>}\n   */\n  say = (maybeChannel, message, ...messageArgs) => {\n    const channel = sanitizers.channel(maybeChannel)\n    const args = messageArgs.length ? ['', ...messageArgs].join(' ') : ''\n\n    const info = `PRIVMSG/${channel} :${message}${args}`\n\n    const isModerator = get(this, ['_channelState', channel, 'isModerator'])\n\n    const timeout = utils.rejectAfter(\n      this.options.joinTimeout,\n      constants.ERROR_SAY_TIMED_OUT,\n    )\n\n    const commandResolvers = commands.resolvers(this)(\n      channel,\n      message,\n      ...messageArgs,\n    )\n\n    const resolvers = () => Promise.race([timeout, ...commandResolvers])\n\n    return utils\n      .resolveInSequence([\n        this._isUserAuthenticated.bind(this),\n        this.send.bind(\n          this,\n          `${constants.COMMANDS.PRIVATE_MESSAGE} ${channel} :${message}${args}`,\n          { isModerator },\n        ),\n        resolvers,\n      ])\n      .then(resolvedEvent => {\n        this._log.info(info)\n        return resolvedEvent\n      })\n      .catch(err => {\n        this._log.error(info, err)\n        return Promise.reject(err)\n      })\n  }\n\n  /**\n   * @function Chat#whisper\n   * @public\n   * @desc Whisper to another user.\n   * @param {string} user\n   * @param {string} message\n   * @return {Promise<undefined>}\n   */\n  whisper = (user, message) =>\n    utils.resolveInSequence([\n      this._isUserAuthenticated.bind(this),\n      this.send.bind(\n        this,\n        `${constants.COMMANDS.WHISPER} :/w ${user} ${message}`,\n      ),\n    ])\n\n  /**\n   * @function Chat#broadcast\n   * @public\n   * @desc Broadcast message to all connected channels.\n   * @param {string} message\n   * @return {Promise<Array<UserStateMessage>>}\n   */\n  broadcast = message =>\n    utils.resolveInSequence([\n      this._isUserAuthenticated.bind(this),\n      () =>\n        Promise.all(\n          this._getChannels().map(channel => this.say(channel, message)),\n        ),\n    ])\n\n  _handleConnectionAttempt() {\n    return new Promise((resolve, reject) => {\n      const connectProfiler = this._log.startTimer({\n        message: 'Connecting ...',\n      })\n\n      // Connect ...\n      this._readyState = 1\n\n      // Increment connection attempts.\n      this._connectionAttempts += 1\n\n      if (this._client) {\n        // Remove all listeners, just in case.\n        this._client.removeAllListeners()\n      }\n\n      // Create client and connect.\n      this._client = new Client(this.options)\n\n      // Handle messages.\n      this._client.on(constants.EVENTS.ALL, this._handleMessage, this)\n\n      // Handle disconnects.\n      this._client.on(\n        constants.EVENTS.DISCONNECTED,\n        this._handleDisconnect,\n        this,\n      )\n\n      // Listen for reconnects.\n      this._client.once(constants.EVENTS.RECONNECT, () => this.reconnect())\n\n      // Listen for authentication failures.\n      this._client.once(constants.EVENTS.AUTHENTICATION_FAILED, reject)\n\n      // Once the client is connected, resolve ...\n      this._client.once(constants.EVENTS.CONNECTED, e => {\n        connectProfiler.done({ message: 'Connected' })\n        resolve(e)\n      })\n    })\n  }\n\n  _handleConnectSuccess(globalUserState) {\n    this._readyState = 3\n    this._connectionAttempts = 0\n\n    // Process GLOBALUSERSTATE message.\n    this._handleMessage(globalUserState)\n\n    return globalUserState\n  }\n\n  _handleConnectRetry(error) {\n    this._connectionInProgress = null\n    this._readyState = 2\n\n    this._log.info('Retrying ...')\n\n    if (error.event === constants.EVENTS.AUTHENTICATION_FAILED) {\n      return this.options\n        .onAuthenticationFailure()\n        .then(token => (this.options = { ...this.options, token }))\n        .then(() => utils.resolveAfter(this.options.connectionTimeout))\n        .then(() => this.connect())\n        .catch(() => {\n          this._log.error('Connection failed')\n          throw new Errors.AuthenticationError(error)\n        })\n    }\n\n    return this.connect()\n  }\n\n  _isUserAuthenticated() {\n    return new Promise((resolve, reject) => {\n      if (chatUtils.isUserAnonymous(this.options.username)) {\n        reject(new Error('Not authenticated'))\n      } else {\n        resolve()\n      }\n    })\n  }\n\n  _emit(eventName, message) {\n    if (eventName) {\n      const displayName =\n        get(message, 'tags.displayName') || message.username || ''\n      const info = get(message, 'message') || ''\n      this._log.info(`${eventName}`, `${displayName}${info ? ':' : ''}`, info)\n\n      eventName\n        .split('/')\n        .filter(part => part !== '#')\n        .reduce((parents, part) => {\n          const eventParts = [...parents, part]\n          super.emit(eventParts.join('/'), message)\n          return eventParts\n        }, [])\n    }\n\n    /**\n     * All events are also emitted with this event name.\n     * @event Chat#*\n     */\n    super.emit(constants.EVENTS.ALL, message)\n  }\n\n  _getChannels() {\n    return Object.keys(this._channelState)\n  }\n\n  _getChannelState(channel) {\n    return this._channelState[channel]\n  }\n\n  _setChannelState(channel, state) {\n    this._channelState[channel] = state\n  }\n\n  _removeChannelState(channel) {\n    this._channelState = Object.entries(this._channelState).reduce(\n      (channelStates, [name, state]) => {\n        return name === channel\n          ? channelStates\n          : { ...channelStates, [name]: state }\n      },\n      {},\n    )\n  }\n\n  _clearChannelState() {\n    this._channelState = {}\n  }\n\n  _handleMessage(baseMessage) {\n    const channel = sanitizers.channel(baseMessage.channel)\n\n    const selfUsername = get(this, '_userState.username', '')\n    const messageUsername = get(baseMessage, 'username')\n    const isSelf = selfUsername === messageUsername\n\n    const preMessage = { ...baseMessage, isSelf }\n\n    let eventName = preMessage.command\n    let message = preMessage\n\n    switch (preMessage.command) {\n      case constants.EVENTS.JOIN: {\n        message = parsers.joinOrPartMessage(preMessage)\n        message.isSelf = true\n        eventName = `${message.command}/${channel}`\n        break\n      }\n\n      case constants.EVENTS.PART: {\n        message = parsers.joinOrPartMessage(preMessage)\n        message.isSelf = true\n        eventName = `${message.command}/${channel}`\n        break\n      }\n\n      case constants.EVENTS.NAMES: {\n        message = parsers.namesMessage(preMessage)\n        message.isSelf = true\n        eventName = `${message.command}/${channel}`\n        break\n      }\n\n      case constants.EVENTS.NAMES_END: {\n        message = parsers.namesEndMessage(preMessage)\n        message.isSelf = true\n        eventName = `${message.command}/${channel}`\n        break\n      }\n\n      case constants.EVENTS.CLEAR_CHAT: {\n        message = parsers.clearChatMessage(preMessage)\n        eventName = message.event\n          ? `${message.command}/${message.event}/${channel}`\n          : `${message.command}/${channel}`\n        break\n      }\n\n      case constants.EVENTS.HOST_TARGET: {\n        message = parsers.hostTargetMessage(preMessage)\n        eventName = `${message.command}/${channel}`\n        break\n      }\n\n      case constants.EVENTS.MODE: {\n        message = parsers.modeMessage(preMessage)\n        eventName = `${message.command}/${channel}`\n\n        if (selfUsername === message.username) {\n          const channelState = this._getChannelState(channel)\n\n          this._setChannelState(channel, {\n            ...channelState,\n            userState: {\n              ...channelState.userState,\n              isModerator: message.isModerator,\n            },\n          })\n        }\n        break\n      }\n\n      case constants.EVENTS.GLOBAL_USER_STATE: {\n        message = parsers.globalUserStateMessage(preMessage)\n        this._userState = message.tags\n        break\n      }\n\n      case constants.EVENTS.USER_STATE: {\n        message = parsers.userStateMessage(preMessage)\n        eventName = `${message.command}/${channel}`\n\n        this._setChannelState(channel, {\n          ...this._getChannelState(channel),\n          userState: message.tags,\n        })\n        break\n      }\n\n      case constants.EVENTS.ROOM_STATE: {\n        message = parsers.roomStateMessage(preMessage)\n        eventName = `${message.command}/${channel}`\n\n        this._setChannelState(channel, {\n          ...this._getChannelState(channel),\n          roomState: message.roomState,\n        })\n        break\n      }\n\n      case constants.EVENTS.NOTICE: {\n        message = parsers.noticeMessage(preMessage)\n        eventName = `${message.command}/${message.event}/${channel}`\n        break\n      }\n\n      case constants.EVENTS.USER_NOTICE: {\n        message = parsers.userNoticeMessage(preMessage)\n        eventName = `${message.command}/${message.event}/${channel}`\n        break\n      }\n\n      case constants.EVENTS.PRIVATE_MESSAGE: {\n        message = parsers.privateMessage(preMessage)\n        eventName = message.event\n          ? `${message.command}/${message.event}/${channel}`\n          : `${message.command}/${channel}`\n        break\n      }\n\n      default: {\n        const command = chatUtils.getEventNameFromMessage(preMessage)\n        eventName = channel === '#' ? command : `${command}/${channel}`\n      }\n    }\n\n    this._emit(eventName, message)\n  }\n\n  _handleDisconnect() {\n    this._connectionInProgress = null\n    this._readyState = 5\n  }\n}\n\nexport { constants }\nexport default Chat\n"]}