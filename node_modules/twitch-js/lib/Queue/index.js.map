{"version":3,"sources":["../../src/Queue/index.js"],"names":["constants","Queue","options","_length","_timestamp","Date","_callbacks","push","fn","priority","_q","on","_handleTaskQueued","_handleTaskFinished","_handlePriority","cb","_handlePrecondition","now","_tickInterval","Math","max","_maxLength","taskId","task","onTaskQueued","result","onTaskFinished","_handleQueueDrained","onQueueDrained","maxLength","tickInterval","store","setImmediate","precondition","preconditionRetryTimeout","QUEUE_TICK_RATE"],"mappings":"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","file":"index.js","sourcesContent":["import BetterQueue from 'better-queue'\nimport MemoryStore from 'better-queue-memory'\nimport setImmediate from 'core-js/library/fn/set-immediate'\n\nimport * as constants from './constants'\n\nclass Queue {\n  _q\n\n  _maxLength\n  _length = 0\n\n  _timestamp = new Date()\n  _tickInterval\n\n  _callbacks = {}\n\n  constructor(options = {}) {\n    const {\n      maxLength = 20,\n      tickInterval = 30000,\n      onTaskQueued = () => {},\n      onTaskFinished = () => {},\n      onQueueDrained = () => {},\n    } = options\n\n    this._maxLength = maxLength\n    this._tickInterval = tickInterval\n\n    this._callbacks = { onTaskQueued, onTaskFinished, onQueueDrained }\n\n    this._q = new BetterQueue(\n      ({ fn }, cb) => {\n        fn()\n        cb()\n      },\n      {\n        store: new MemoryStore(),\n        setImmediate,\n        priority: this._handlePriority,\n        precondition: this._handlePrecondition,\n        preconditionRetryTimeout: constants.QUEUE_TICK_RATE,\n      },\n    )\n\n    this._q.on('drain', this._handleQueueDrained)\n  }\n\n  push = ({ fn, priority }) => {\n    return this._q\n      .push({ fn, priority })\n      .on('accepted', this._handleTaskQueued)\n      .on('finish', this._handleTaskFinished)\n  }\n\n  _handlePriority = ({ priority = 1 }, cb) => cb(null, priority)\n\n  _handlePrecondition = cb => {\n    const now = new Date()\n    if (now - this._timestamp > this._tickInterval) {\n      this._timestamp = now\n      this._length = Math.max(0, this._length - this._maxLength)\n    }\n\n    cb(null, this._length < this._maxLength)\n  }\n\n  _handleTaskQueued = (taskId, task) => {\n    this._callbacks.onTaskQueued(taskId, task)\n  }\n\n  _handleTaskFinished = (taskId, result) => {\n    const now = new Date()\n    if (now - this._timestamp > this._tickInterval) {\n      this._timestamp = new Date()\n    }\n\n    this._length = this._length + 1\n\n    this._callbacks.onTaskFinished(taskId, result)\n  }\n\n  _handleQueueDrained = () => {\n    this._callbacks.onQueueDrained()\n  }\n}\n\nexport default Queue\n"]}