'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChatConstants = exports.Chat = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Chat = require('./Chat');

var _Chat2 = _interopRequireDefault(_Chat);

var _Api = require('./Api');

var _Api2 = _interopRequireDefault(_Api);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @class
 * @public
 * @classdesc TwitchJs client
 * @example <caption>Instantiating TwitchJS</caption>
 * const token = 'cfabdegwdoklmawdzdo98xt2fo512y'
 * const username = 'ronni'
 * const twitchJs = new TwitchJs({ token, username })
 *
 * twitchJs.chat.connect().then(globalUserState => {
 *   // Do stuff ...
 * })
 *
 * twitchJs.api.get('channel').then(response => {
 *   // Do stuff ...
 * })
 */

var TwitchJs = function () {
  /**
   * TwitchJs constructor
   * @constructor
   * @param {Object} options
   * @param {string} options.token
   * @param {string} options.username
   * @param {string} options.clientId
   * @param {Object} options.log
   * @param {function} [options.onAuthenticationFailure]
   * @param {ChatOptions} [options.chat]
   * @param {ApiOptions} [options.api]
   */
  function TwitchJs(_ref) {
    var token = _ref.token,
        username = _ref.username,
        clientId = _ref.clientId,
        log = _ref.log,
        onAuthenticationFailure = _ref.onAuthenticationFailure,
        chat = _ref.chat,
        api = _ref.api;

    _classCallCheck(this, TwitchJs);

    /**
     * @public
     * @property {Chat} chat
     */
    this.chat = new _Chat2.default(_extends({
      log: log
    }, chat, {
      token: token,
      username: username,
      onAuthenticationFailure: onAuthenticationFailure
    }));

    /**
     * @public
     * @property {Object} chatConstants
     */
    this.chatConstants = _Chat.constants;

    /**
     * @public
     * @property {Api} api
     */
    this.api = new _Api2.default(_extends({
      log: log
    }, api, {
      token: token,
      clientId: clientId,
      onAuthenticationFailure: onAuthenticationFailure
    }));
  }

  /**
   * @function TwitchJs#updateOptions
   * @desc Update client options.
   * @param {Object} options
   * @param {ChatOptions} [options.chat] New chat client options.
   * @param {ApiOptions} [options.api] New API client options.
   */


  _createClass(TwitchJs, [{
    key: 'updateOptions',
    value: function updateOptions(_ref2) {
      var chat = _ref2.chat,
          api = _ref2.api;

      this.chat.updateOptions(chat);
      this.api.updateOptions(api);
    }
  }]);

  return TwitchJs;
}();

exports.Chat = _Chat2.default;
exports.ChatConstants = _Chat.constants;
exports.default = TwitchJs;
//# sourceMappingURL=index.js.map